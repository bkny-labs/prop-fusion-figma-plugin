import { stateService } from "./state.service";
import { StateNames } from "../../types/states.model";

export function handleResize(msg): void {
  figma.ui.resize(msg.width, msg.height);
}

export function handleCopyNotification(msg): void {
  figma.notify(msg.type === 'copy-success' ? 'Copied to clipboard!' : `Failed to copy text: ${msg.message}`);
}

export function generateSnippet(msg: MessageEvent): void {
  const [component] = msg.selection;
  if (component && component.type === 'COMPONENT_SET' && component.variantGroupProperties) {
    const componentName = component.name.replace(/\s+/g, '') + 'Component';
    const cssFileName = component.name.toLowerCase().replace(/\s+/g, '-') + '.css';
    const variantProps = Object.entries(component.variantGroupProperties);

    const propTypes = variantProps.map(([key, valueObj]) => {
      if (valueObj && Array.isArray(valueObj.values)) {
        return `${key}: PropTypes.oneOf([${valueObj.values.map(value => `'${value}'`).join(', ')}])`;
      }
      return null;
    }).filter(Boolean).join('; ');

    const classProps = variantProps.map(([key, valueObj]) => {
      if (valueObj && Array.isArray(valueObj.values)) {
        return `${key.toLowerCase()}-${'${' + key.toLowerCase() + '}'} `;
      }
      return null;
    }).filter(Boolean).join(' ');

    const disabledCheck = variantProps.some(([key, valueObj]) => key.toLowerCase() === 'state' && Array.isArray(valueObj.values) && valueObj.values.includes('Disabled'));

    const snippet = {
      react: `
// @name: ${componentName}
// @description: React Component generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}
import React from 'react';
import PropTypes from 'prop-types';
import './${cssFileName}';
interface ${componentName}Props {
  ${propTypes}
}
const ${componentName}: React.FC<${componentName}Props> = ({ ${variantProps.map(([key]) => key).join(', ')} }) => {
  return <button className="${componentName.toLowerCase()} ${classProps}" disabled={${disabledCheck ? 'true' : 'false'}} >Button</button>;
};
export default ${componentName};
      `,
      angular: `
// @name: ${componentName}
// @description: NG Component generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}
// Angular component code
`,
      flutter: `
// @name: ${componentName}
// @description: Widget generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}
// Flutter widget code
`
    };

    handleResize({ width: 600, height: 720 });

    if (typeof figma.ui.postMessage === "function") {
      figma.ui.postMessage({ type: 'deliver-snippet', code: snippet });
    }
    if (typeof stateService.setState === "function") {
      stateService.setState(StateNames.SNIPPET, snippet);
    }
  } else {
    figma.ui.postMessage({ type: 'error', message: 'No component set selected or node is not a component set.' });
  }
}
