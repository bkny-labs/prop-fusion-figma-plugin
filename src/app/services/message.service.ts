import { StateService } from './state.service';
import { StateNames } from '../../types/states.model';
import { heightLarge, widthLarge } from '../../plugin/controller';

const stateService = new StateService();
export class MessageService {
  public handleResize(msg): void {
    figma.ui.resize(msg.width, msg.height);
  }

  public handleCopyNotification(msg): void {
    figma.notify(msg.type === 'copy-success' ? 'Copied to clipboard!' : `${msg.message}`);
  }

  public generateSnippet(msg: MessageEvent): void {
    const [component] = msg.selection;
    if (component && component.type === 'COMPONENT_SET' && component.variantGroupProperties) {
      const componentName = component.name.replace(/\s+/g, '') + 'Component';
      const componentNameTypes = component.name.replace(/\s+/g, '') + 'Types';
      const cssFileName = component.name.toLowerCase().replace(/\s+/g, '-') + '.css';
      const variantProps = Object.entries(component.variantGroupProperties);

      // Generating TypeScript types for each variant property
      const propTypes = variantProps
        .map(([key, values]) => {
          if (Array.isArray(values)) {
            // Ensure values is treated as an array
            const typeValues = (values as string[]).map((value) => `'${value}'`).join(' | ');
            return `type ${key}Type = ${typeValues};`;
          }
          return null; // In case the data is not as expected
        })
        .filter(Boolean)
        .join('\n');

      // Generating className bindings for each variant property
      const classProps = variantProps
        .map(([key, values]) => {
          if (Array.isArray(values)) {
            return `${key.toLowerCase()}={props.${key.toLowerCase()}}`;
          }
          return null;
        })
        .filter(Boolean)
        .join(' ');

      // Generating CSS for each variant property
      const cssClasses = variantProps
        .map(([key, values]) => {
          if (Array.isArray(values)) {
            return (values as string[])
              .map(
                (value) => `
.${component.name.toLowerCase()}-${key.toLowerCase()}-${value.toLowerCase().replace(/\s+/g, '-')} {
  /* Example CSS based on ${key} and its value ${value} */
}
        `
              )
              .join('');
          }
          return '';
        })
        .join('');

      // Condition to check if the 'Disabled' state is included in the properties
      const disabledCheck = variantProps.some(
        ([key, values]) => key.toLowerCase() === 'state' && Array.isArray(values) && values.includes('Disabled')
      );

      // Interface properties for the React component
      const interfaceProps = variantProps
        .map(([key, values]) => (Array.isArray(values) ? `${key.toLowerCase()}: ${key}Type;` : null))
        .filter(Boolean)
        .join('\n');

      // Template literal for React component
      const snippet = {
        react: `
// ${componentName}.tsx
// @name: ${componentName}
// @description: React Component generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}
import React from 'react';
import './${cssFileName}';

${propTypes}

interface ${componentName}Props {
  ${interfaceProps}
  disabled?: boolean;
}

const ${componentName}: React.FC<${componentName}Props> = (props) => {
  return <button className="${component.name.toLowerCase()}-component" ${classProps}" disabled={props.disabled || ${
          disabledCheck ? 'true' : 'false'
        }} >Button</button>;
};

export default ${componentName};
      `,
        angular: `
// ${component.name.toLowerCase()}.component.ts
// @name: ${componentName}
// @description: NG Component generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}

import { Component, Input } from '@angular/core';
import './${cssFileName}';

${propTypes}

@Component({
  selector: '${component.name.toLowerCase()}-component',
  template: \`
    <button [class]="'${componentName.toLowerCase()} ' + (${classProps})" [disabled]="disabled || ${disabledCheck}">
      Button
    </button>
  \`,
  styleUrls: ['./${cssFileName}']
})
export class ${componentName} {
  @Input() disabled: boolean = false;
  ${interfaceProps
    .split('\n')
    .map((prop) => '@Input() ' + prop)
    .join('\n  ')}
}
`,
        flutter: `
// ${componentName}.dart
// @name: ${componentName}
// @description: Widget generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}

import 'package:flutter/material.dart';

${propTypes.replace(/type/g, 'enum')}

class ${componentName} extends StatelessWidget {
  final bool disabled;
  ${interfaceProps
    .replace(/;/g, '')
    .split('\n')
    .map((prop) => 'final ' + prop + ';')
    .join('\n  ')}
  const ${componentName}({ 
    Key? key, 
    this.disabled = false, 
    ${interfaceProps.replace(/:/g, ',').replace(/;/g, '').split('\n').join(',\n    ')}
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      style: ButtonStyle(
        backgroundColor: MaterialStateProperty.resolveWith<Color>(
          (Set<MaterialState> states) {
            if (states.contains(MaterialState.disabled)) {
              return Colors.grey; // Disabled color
            }
            return Colors.blue; // Default color
          },
        ),
      ),
      onPressed: disabled ? null : () {},
      child: Text('Button'),
    );
  }
}
`,
        typescript: `
// @name: ${componentNameTypes}
// @description: Types generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}

${propTypes}

interface ${componentName}Props {
  ${interfaceProps}
  disabled?: boolean;
}
`,
        css: `
// @name: ${componentName}
// @description: Styles generated by PropFusion
// @params: ${variantProps.map(([key]) => key).join(', ')}
${cssClasses}
`,
      };

      this.handleResize({ width: widthLarge, height: heightLarge });

      if (typeof figma.ui.postMessage === 'function') {
        figma.ui.postMessage({ type: 'deliver-snippet', code: snippet });
      }
      if (typeof stateService.setState === 'function') {
        stateService.setState(StateNames.SNIPPET, snippet);
      }
    } else {
      figma.ui.postMessage({ type: 'error', message: 'No component set selected or node is not a component set.' });
    }
  }
}
